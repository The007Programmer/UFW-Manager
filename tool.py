import os
import json
import subprocess

def run_bash_file(path):
    """
    Runs a Bash script and prints its output/errors.
    !!! THIS FUNCTION GENERATED BY CHATGPT !!!
    """
    try:
        process = subprocess.run(['bash', path], capture_output=True, text=True, check=True)
        print(process.stdout)
        if process.stderr:
            print(process.stderr)
    except subprocess.CalledProcessError as e:
        print(f"Error executing script: {e.stderr if e.stderr else e}")
    except FileNotFoundError:
        print(f"Error: Bash script not found at path: {path}")

#

def run_bash_cmd(command):
        """
        Runs a Bash command and prints its output/errors.
        """
        try:
            process = subprocess.run(['bash', '-c', command], capture_output=True, text=True, check=True)
            print(process.stdout)
            if process.stderr:
                print(process.stderr)
        except subprocess.CalledProcessError as e:
            print(f"Error executing command: {e.stderr if e.stderr else e}")
        except FileNotFoundError:
            print("Error: Bash not found.")


run_bash_cmd("ls")

def main():
    pass


# main structure
# --- checking if ufw enabled ---
# enables ufw if not already enabled
# also mentions all ips are blocked until added, add individual ips
# begins prgm()
# once program ends run sudo ufw reload to enact new rules

# note
# add feature to SYNC, checks the current UFW rules
# see if there are ips that arent in the whitelist
# sync it to add it to our whitelist or blacklist
# if ips not matching ask name for person, if none, hit enter or leave blank.

def prgm():
    start = input("ENTER CMD #:\n1) MANAGE Users (Add/Remove/Switch)\n2) SHOW Whitelist/Blacklist\n3) EXIT\n\n")
    match start:
        case '1':
            manager()
        case '2':
            show_db()
        case '3':
            exit()

def manager():
    name = input("\nUser Name? ")
    ip = input("User IP? ")
    w_b = input("Whitelist or Blacklist? (w/b) ")

    if w_b not in ["w", "b"]:
        print("\nPlease specify white/black list!")
        manager()

    db_file = 'db.json'

    if not os.path.exists(db_file):
        print(f"\nDatabase file '{db_file}' does not exist in the current directory.\n")
        return

    with open(db_file, 'r') as file:
        db = json.load(file)

    if name in db["whitelist"] and db["whitelist"][name] == ip:
        if w_b == 'w':
            print(f"\n{name} is already in the whitelist.\n")
        else:
            switch = input(f"{name} is in the whitelist. Do you want to switch to blacklist? (y/n) ")
            if switch == 'y':
                db["whitelist"].pop(name)
                db["blacklist"][name] = ip
                print(f"\n{name} has been moved to the blacklist.\n")
                
    elif name in db["blacklist"] and db["blacklist"][name] == ip:
        if w_b == 'b':
            print(f"\n{name} is already in the blacklist.\n")
        else:
            switch = input(f"{name} is in the blacklist. Do you want to switch to whitelist? (y/n) ")
            if switch == 'y':
                db["blacklist"].pop(name)
                db["whitelist"][name] = ip
                print(f"\n{name} has been moved to the whitelist.\n")
    else:
        if w_b == 'w':
            db["whitelist"][name] = ip
            print(f"\n{name} has been added to the whitelist.\n")
        else:
            db["blacklist"][name] = ip
            print(f"\n{name} has been added to the blacklist.\n")

    with open(db_file, 'w') as file:
        json.dump(db, file, indent=2)

    more = input("Do you want to add more users? (y/n) ")
    if more == 'y':
        manager()
    else:
        print("\nReturning to menu!\n")
        prgm()

def show_db():

    # Load the database file if it exists, otherwise create a new database
    db_file = 'db.json'
    # if file exists in path then open as read, if not create local db
    if os.path.exists(db_file):
        with open(db_file, 'r') as file:
            db = json.load(file)

    # Asks which list
    which=input("\nWhich database would you like to see? Whitelist, Blacklist or All? (w/b/a) ")

    # first implementation of match case to pick instead of if else chain
    match which:
        # prints marker line, then prints db, with newline formatting
        case "w":
            print("\n===== WHITELIST =====\n\n"+f"{json.dumps(db.get("whitelist", {}), indent=4)}\n")
        case "b":
            print("\n===== BLACKLIST =====\n\n"+f"{json.dumps(db.get("blacklist", {}), indent=4)}\n")
        case "a":
            print("\n===== ALL LISTS =====\n\n"+f"{json.dumps(db, indent=4)}\n")

# prgm()